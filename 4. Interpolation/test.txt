def spline_solution(x, X, Y):
    // Определяем значение (x - x_0) - константа для уравнения кубического сплайна
    h = []
    for i in range(1, len(X)):
        h.append(X[i] - X[i - 1])

    n = len(X) - 1
    koef = []
    for i in range(0, n):
        temp = [0] * 3 * n
        temp[i] = h[i]
        temp[n + i] = pow(h[i], 2)
        temp[2 * n + i] = pow(h[i], 3)
        koef.append(temp)

    for i in range(0, n - 1):
        temp = [0] * 3 * n
        temp[i + 1] = 1
        temp[i] = -1
        temp[n + i] = -2 * h[i]
        temp[2 * n + i] = -3 * pow(h[i], 2)
        koef.append(temp)

    for i in range(0, n - 1):
        temp = [0] * 3 * n
        temp[n + i + 1] = 1
        temp[n + i] = -1
        temp[2 * n + i] = -3 * pow(h[i], 2)
        koef.append(temp)

    temp = [0] * 3 * n
    temp[n] = 1
    koef.append(temp)

    temp = [0] * 3 * n
    temp[2*n - 1] = 1
    temp[3*n - 1] = 3 * h[n - 1]
    koef.append(temp)

    values = [0] * 3 * n
    for i in range(1, n + 1):
        values[i-1] = Y[i] - Y[i - 1]

    n_koef = np.array(koef)
    n_values = np.array(values)
    solve = numpy.linalg.solve(n_koef, n_values)
    a_koefs = [Y[i] for i in range(n)]
    b_koefs = solve[:n]
    c_koefs = solve[n:2*n]
    d_koefs = solve[2*n:3*n]

    // Находим отрезок, которому принадлежит x
    temp_x = x
    i = 0
    while temp_x - h[i] > 0:
        temp_x -= h[i]
        i += 1

    // Возвращаем результат решения уравнения
    result = [a_koefs[i], b_koefs[i] * (x - X[i]), c_koefs[i] * pow(x - X[i], 2), d_koefs[i] * pow(x - X[i], 3)]
    return sum(result)